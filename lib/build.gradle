plugins {
    id 'java-library'
    id 'maven-publish'
    id 'signing'
}

ext {
    isReleaseVersion = !version.endsWith("SNAPSHOT")
}

compileJava {
    sourceCompatibility = '11'
    targetCompatibility = '11'
}

repositories {
    mavenCentral()
    mavenLocal()
}

dependencies {
    implementation libs.itext.core
    implementation libs.jackson.databind
    implementation libs.pdfbox
    implementation libs.poi
    implementation libs.poi.ooxml
    implementation libs.slf4j.api
    implementation libs.subprocessj
    implementation libs.unittest.helper
    testImplementation libs.assertj.core
    testImplementation libs.logback.classic
    testImplementation libs.testng
}

test {
    useTestNG()
}

jar {
    archiveBaseName = rootProject.name
}



// ========= importing the fixture from external local repositories ===========
tasks.register('deleteExternalFixture') {
    Map<String, File> fixtureDirs = new HashMap<>()
    fixtureDirs.put('aogan-jimukyoku', projectDir.toPath()
            .resolve('src/test/fixture/hub-aogan/aogan-jimukyoku').normalize().toFile())
    fixtureDirs.put('aogan-vba-lib', projectDir.toPath()
            .resolve('src/test/fixture/hub-aogan/aogan-vba-lib').normalize().toFile())
    fixtureDirs.put('kazurayam-vba-lib', projectDir.toPath()
            .resolve('src/test/fixture/hub-aogan/kazurayam-vba-lib').normalize().toFile())
    fixtureDirs.put('VBACallGraphSetup', projectDir.toPath()
            .resolve('src/test/fixture/hub-kazurayam/VBACallGraphSetup').normalize().toFile())
    doLast {
        delete fixtureDirs.get('aogan-jimukyoku')
        delete fixtureDirs.get('aogan-vba-lib')
        delete fixtureDirs.get('kazurayam-vba-lib')
        delete fixtureDirs.get('VBACallGraphSetup')
    }
}

tasks.register('importExternalFixture') {
    Map<String, File> externalRepos = new HashMap<>()
    externalRepos.put('aogan-jimukyoku', project.rootDir.toPath()
            .resolve('../../github-aogan/aogan-jimukyoku').normalize().toFile())
    externalRepos.put('aogan-vba-lib', project.rootDir.toPath()
            .resolve('../../github-aogan/aogan-vba-lib').normalize().toFile())
    externalRepos.put('kazurayam-vba-lib', project.rootDir.toPath()
            .resolve('../../github-aogan/kazurayam-vba-lib').normalize().toFile())
    externalRepos.put('VBACallGraphSetup', project.rootDir.toPath()
            .resolve('../VBACallGraphSetup').normalize().toFile())

    doFirst {
        externalRepos.each {
            assert it.value.exists()
            println it.key + "=" + it.value
        }
    }
    doLast {
        copy {
            from(externalRepos.get('aogan-jimukyoku')) {
                include 'office/会員名簿からIDパスワード管理情報を生成する.xlsm'
                include 'office/会費納入のお願いletterを作成する.xlsm'
                include 'office/会費納入状況チェック_R6年度.xlsm'
                include 'office/決算算出ワークブック_令和5年度.xlsm'
                include 'office/exported-vba-source/**/*'
            }
            into projectDir.toPath()
                    .resolve('src/test/fixture/hub-aogan/aogan-jimukyoku')
        }
        copy {
            from(externalRepos.get('aogan-vba-lib')) {
                include 'office/Cashbook*.xlsm'
                include 'office/Member*.xlsm'
                include 'office/exported-vba-source/**/*'
            }
            into projectDir.toPath()
                    .resolve('src/test/fixture/hub-aogan/aogan-vba-lib')
        }
        copy {
            from(externalRepos.get('kazurayam-vba-lib')) {
                include 'office/Backbone.xlsm'
                include 'office/exported-vba-source/**/*'
            }
            into projectDir.toPath()
                    .resolve('src/test/fixture/hub-aogan/kazurayam-vba-lib')
        }
        copy {
            from (externalRepos.get('VBACallGraphSetup')) {
                include 'office/VBACallGraphSetup.xlsm'
                include 'office/exported-vba-source/'
            }
            into projectDir.toPath()
                    .resolve('src/test/fixture/hub-kazurayam/VBACallGraphSetup')
        }
    }
}

javadoc {
    options.showFromProtected()
    failOnError = false
    options.locale = "en_US"
}
tasks.register('copyJavadocToDocsDir', Copy) {
    from "build/docs/javadoc"
    into "../docs/api"
}
javadoc.finalizedBy copyJavadocToDocsDir

jar {
    archiveBaseName = rootProject.name
}

publishing {
    publications {
        vbacallgraph(MavenPublication) {
            from components.java
            artifactId = rootProject.name
            pom {
                groupId = project.group
                name = project.rootProject.name
                description = "Draw a Call Graph of a set of Excel VBA projects using PlantUML"
                url = "https://kazurayam.github.io/VBACallGraph/"
                licenses {
                    license {
                        name = "The Apache License, Version 2.0"
                        url = "https://www.apache.org.licenses/LICENSE-2.0.txt"
                    }
                }
                developers {
                    developer {
                        id = "kazurayam"
                        name = "URAYAMA,kazuaki"
                        email = "kazuaki.urayama@gmail.com"
                    }
                }
                scm {
                    connection = "scm:git:https://github.com/kazurayam/${project.rootProject.name}.git"
                    developerConnection = "scm:git:git@github.com:kazurayam/${project.rootProject.name}.git"
                    url = "https://github.com/kazurayam/${project.rootProject.name}"
                }
            }
        }
    }
}
repositories {
    maven {
        def releaseRepo = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
        def snapshotRepo = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
        url = isReleaseVersion ? releaseRepo : snapshotRepo
        credentials {
            username = project.hasProperty("ossrhUsername") ? ossrhUsername : "Unknown user"
            password = project.hasProperty("ossrhPassword") ? ossrhPassword : "Unknown password"
        }
    }
}

java {
    withSourcesJar()
    withJavadocJar()
}

signing {
    sign publishing.publications.vbacallgraph
}
// I do not want to sign the SNAPSHOT
tasks.withType(Sign) {
    onlyIf { isReleaseVersion }
}